# include <stdlib.h>
# include <stdio.h>
# include <string.h>

typedef struct node{
  char cutline;
  double width;
  double height;
  double x_cor;
  double y_cor;
  struct node *Left;
  struct node *Right;
} Node;

typedef struct stack
{
  struct stack *next;
  Node * Info;
} Stack; 

void Pre_Order_Print (Node *head)
{
  if (head == NULL)
    return;
  
  if (head -> width == 0)
  {
    printf ("%c", head -> cutline);
  }
  
  else 
  {
    printf ("(%le,%le)",head -> width, head -> height);
  }
  Pre_Order_Print (head -> Left);
  Pre_Order_Print (head -> Right);
}

Node *Create_node (char cutline, double width, double height)
{
  Node *New_Node = malloc (sizeof(Node));
  New_Node -> cutline = cutline;
  New_Node -> width = width;
  New_Node -> height = height;
  New_Node -> x_cor = 0;
  New_Node -> y_cor = 0;
  New_Node -> Left = NULL;
  New_Node -> Right = NULL;
//   printf("\niiiiiii:  %d, %c\n",New_Node->thisnode,New_Node->cutline);
  return New_Node;
}



Stack *Push (Stack *Top, Node * temp)
{
  if (Top -> Info == NULL)
  {
    Top -> Info = temp;
    return Top;
  }
  
  else
  {
    Stack *New_Stack = malloc (sizeof(Stack));
    New_Stack -> Info = temp;
    New_Stack -> next = Top;
    
    return New_Stack; 
  }
}
  
Node *Pop(Stack *Top)
{
  Node *Get_Info = Top -> Info;
  Top = Top -> next;
  return Get_Info;
}
void Initial_Stack (Stack* Top)
{
  Top = malloc(sizeof(Stack));
  Top -> next = NULL;
  Top -> Info = NULL;
}
Node *LoadFile(char *Filename)
{ 
  printf ("\n%s" , Filename);
  FILE *fptr;
  fptr = fopen (Filename, "r");
  char ch;
  double width;
  double height;

  Stack *Top = NULL;
  Initial_Stack(Top);
  Node *Next_Node = NULL; 
  printf ("\nNext Nodde");
 
  while (!feof(fptr))
  { 
    ch = fgetc (fptr);
    printf ("\n%c", ch);
    
    if (ch == '(')
    {
      fscanf(fptr, "%le", &width);
      :::ew      printf ("\n%le", width);
      ch = fgetc (fptr);
      printf ("\n%c", ch);
      fscanf(fptr, "%le", &height);
      printf ("\n%le", width);
      ch = fgetc (fptr);
      printf ("\n%c", ch);
      printf ("\n Width: %le, Height: %le", width, height);
      Next_Node = Create_node ('-', width, height);
      Top = Push (Top, Next_Node);
    }
        
    
    if (ch == 'V')
    {
      Next_Node = Create_node ('V', 0, 0);
      Next_Node -> Right = Pop (Top);
      Next_Node -> Left = Pop (Top);
      
      Top = Push (Top, Next_Node);
    }
    
    if (ch == 'H')
    {
      Next_Node = Create_node ('H', 0, 0);
      Next_Node -> Right = Pop (Top);
      Next_Node -> Left = Pop (Top);
      
      Top = Push (Top, Next_Node);
    }
  }
  
  return Next_Node;
}


    
int main(int argc, char **argv)
{
  printf("saadasdasdas");
  Node *head = LoadFile(argv[1]);
//   printf ("Pre Order: ");
     Pre_Order_Print (head);
//   printf ("\nInorder: ");
//   printf ("\nPost Order: ");
     return (0);
}
    
      
        
    
    

